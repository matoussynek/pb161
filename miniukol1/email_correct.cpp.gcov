        -:    0:Source:email_correct.cpp
        -:    0:Graph:email_correct.gcno
        -:    0:Data:email_correct.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <cassert>
        -:    2:#include <iostream>
        -:    3:#include <string>
        -:    4:
        -:    5:using namespace std;
        -:    6:
        -:    7:bool localPartMayContain(size_t pos, bool isEscaped, char c, char prev) {
       88:    8:	if (isEscaped) {
        7:    9:		if (c == ' ')
        2:   10:			return true;
        5:   11:		if (c == '\\')
        4:   12:			return true;
        1:   13:		return false;
        -:   14:	}
        -:   15:
       81:   16:	if (isalnum(c))
       64:   17:		return true;
        -:   18:
       17:   19:	if (c == '.') {
        5:   20:		if (pos == 0)
        1:   21:			return false;
        4:   22:		if (prev == '.')
        1:   23:			return false;
        -:   24:
        3:   25:		return true;
        -:   26:	}
        -:   27:
       12:   28:	if (c == '\\')
        8:   29:		return true;
        -:   30:
        4:   31:	return false;
       88:   32:}
        -:   33:
        -:   34:bool isEmailLocalPart(string const &s) {
       28:   35:	if (s.empty())
        1:   36:		return false;
        -:   37:
       27:   38:	bool isEscaped = false;
      216:   39:	for (size_t i = 0; i < s.size(); i++) {
       88:   40:		char const curr = s[i];
      264:   41:		char const prev = i == 0 ? 0 : s[i - 1];
       88:   42:		bool const may = localPartMayContain(i, isEscaped, curr, prev);
       88:   43:		if (!may)
        7:   44:			return false;
        -:   45:
      237:   46:		isEscaped = !isEscaped && s[i] == '\\';
       81:   47:	}
        -:   48:
       20:   49:	if (isEscaped)
        1:   50:		return false;
        -:   51:
       19:   52:	return true;
       28:   53:}
        -:   54:
        -:   55:bool isAllowedCharacterForDomain(char c) {
       67:   56:	if (isalnum(c))
       47:   57:		return true;
        -:   58:
       20:   59:	if (c == '-')
        5:   60:		return true;
        -:   61:
       15:   62:	if (c == '.')
       10:   63:		return true;
        -:   64:
        5:   65:	return false;
       67:   66:}
        -:   67:
        -:   68:bool domainContainsOnlyAllowedCharacters(string const &s) {
      285:   69:	for (char c : s) {
       67:   70:		if (!isAllowedCharacterForDomain(c))
        5:   71:			return false;
        -:   72:	}
       11:   73:	return true;
       16:   74:}
        -:   75:
        -:   76:bool noTwoConsecutiveDots(string const &s) {
      208:   77:	for (size_t i = 0; i < s.size(); i++) {
      118:   78:		if (s[i] == '.' && (i == 0 || s[i - 1] == '.'))
        2:   79:			return false;
       86:   80:	}
       16:   81:	return true;
       18:   82:}
        -:   83:
        -:   84:bool domainLabelIsOk(string const &label) {
       36:   85:	assert(label.size() != 0);
        -:   86:
       18:   87:	if (label[0] == '-')
        3:   88:		return false;
       15:   89:	if (label[label.size() - 1] == '-')
        2:   90:		return false;
        -:   91:
       13:   92:	return true;
       18:   93:}
        -:   94:
        -:   95:/**
        -:   96: * @pre noTwoConsecutiveDots(s);
        -:   97: */
        -:   98:bool domainLabelsOk(string const &s) {
       11:   99:	size_t b = 0;
      118:  100:	for (size_t i = 0; i < s.size(); i++) {
       50:  101:		if (s[i] != '.')
       41:  102:			continue;
        -:  103:
        -:  104:		// It was checked earlier, so we can assert that.
       18:  105:		assert(i != 0);
       18:  106:		if (!domainLabelIsOk(s.substr(b, i - b)))
        2:  107:			return false;
        7:  108:		b = i + 1;
        7:  109:	}
        -:  110:
        9:  111:	if (s[s.size() - 1] != '.') {
       18:  112:		if (!domainLabelIsOk(s.substr(b)))
        3:  113:			return false;
        6:  114:	}
        -:  115:
        6:  116:	return true;
       11:  117:}
        -:  118:
        -:  119:bool lastDomainLabelContainsNonnumericCharacter(string const &s) {
       12:  120:	assert(!s.empty());
       18:  121:	size_t const end = s[s.size() - 1] == '.' ? s.size() - 2 : s.size() - 1;
        6:  122:	size_t const res = s.rfind(".", end);
       18:  123:	size_t const start = (res == string::npos) ? 0 : res + 1;
        6:  124:	string const last_label = s.substr(start, 1 + end - start);
        -:  125:
       21:  126:	for (char c : last_label) {
        6:  127:		if (!isdigit(c))
        5:  128:			return true;
        -:  129:	}
        1:  130:	return false;
        6:  131:}
        -:  132:
        -:  133:bool isEmailDomain(string const &s) {
       19:  134:	if (s.empty())
        1:  135:		return false;
       18:  136:	if (!noTwoConsecutiveDots(s))
        2:  137:		return false;
       16:  138:	if (!domainContainsOnlyAllowedCharacters(s))
        5:  139:		return false;
       11:  140:	if (!domainLabelsOk(s))
        5:  141:		return false;
        6:  142:	if (!lastDomainLabelContainsNonnumericCharacter(s))
        1:  143:		return false;
        5:  144:	return true;
       19:  145:}
        -:  146:
        -:  147:bool isEmailAddress(string const &s) {
        -:  148:	// Split it to 'local-part@domain'
       30:  149:	size_t at_count = 0;
       30:  150:	size_t at_index = s.size();
      584:  151:	for (size_t i = 0; i < s.size(); i++) {
      262:  152:		if (s[i] == '@') {
       28:  153:			at_count++;
       28:  154:			at_index = i;
       28:  155:		};
      262:  156:	}
        -:  157:
       30:  158:	if (at_count != 1)
        2:  159:		return false;
        -:  160:
       56:  161:	if (!isEmailLocalPart(s.substr(0, at_index)))
        9:  162:		return false;
        -:  163:
       38:  164:	if (!isEmailDomain(s.substr(at_index + 1)))
       14:  165:		return false;
        -:  166:
        5:  167:	return true;
       30:  168:}
